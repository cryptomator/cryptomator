name: 'Windows Signing'
description: 'Sign files on Windows'
inputs:
  base-dir:
    description: 'The base directory to search for files'
    required: true
  file-glob:
    description: 'List of file glob patterns to sign, separated by commas'
    required: true
  username:
    description: 'Username for signing'
    required: true
  password:
    description: 'Password for signing'
    required: true
  recursive:
    description: 'Whether to search recursively in subdirectories'
    required: false
    default: 'false'
  sign-description:
    description: 'Signature description'
    required: false
    default: 'Cryptomator'
  sign-url:
    description: 'Signature URL'
    required: false
    default: 'https://cryptomator.org'

runs:
  using: "composite"
  steps:
    - name: Download Actalis CodeSigner if not present
      id: download-signer
      run: |
        if (! (Test-Path -Path '${{ env.SIGNER_PATH }}')) {
          echo "Downloading Actalis CodeSigner..."
          curl --output "${{ env.SIGNER_NAME }}.zip" -L "${{ env.SIGNER_URL }}"
          if (!(Get-FileHash -Path "${{ env.SIGNER_NAME }}.zip" -Algorithm SHA256).Hash.ToLower().equals("${{ env.SIGNER_HASH }}")) {
            echo "Signer hash mismatch, exiting."
            exit 1
          }
          Expand-Archive -Path "${{ env.SIGNER_NAME }}.zip" -DestinationPath "${{ env.SIGNER_NAME }}" -Force
        }
      env:
        SIGNER_PATH: ${{ github.workspace }}/actalis-signer/ActalisCodeSigner.exe
        SIGNER_NAME: actalis-signer
        SIGNER_URL: 'https://static.cryptomator.org/other/CodeSigner-win-x64-latest.zip'
        SIGNER_HASH: '44a1e09ab72707d049d3e59656e3e35de92e8cda357eec1cfc367016e45835ab'
      shell: pwsh
    - name: Generate, mask, and output the input secrets
      id: set-secrets
      run: |
        s1=${{ inputs.username }}
        s2=${{ inputs.password }}
        echo "::add-mask::$s1"
        echo "::add-mask::$s2"
        echo "username=$s1" >> "$GITHUB_OUTPUT"
        echo "password=$s2" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Sign DLLs with Actalis CodeSigner
      run: |
        $ThrottleLimit = 3
        $recursive = '${{ inputs.recursive }}' -eq 'true'
        $files = Get-ChildItem -Path '${{ inputs.base-dir }}/*' -Include '${{ inputs.file-glob }}' -Recurse:$recursive
        $cancellationSource = [System.Threading.CancellationTokenSource]::new()
        $token = $cancellationSource.Token
        $errors = [System.Collections.Concurrent.ConcurrentBag[string]]::new()
        $jobs = [System.Collections.Generic.List[object]]::new()

        # PROCESSING LOOP WITH THROTTLING
        if($files.Count -eq 0) {
            Write-Host "`n❌ No files found to sign."
            exit 1
        }

        foreach ($file in $files) {
            # Throttle: wait for a slot
            while (($jobs | Where-Object { $_.State -eq 'Running' }).Count -ge $ThrottleLimit) {
                Start-Sleep -Milliseconds 1000
            }

            # Start the signing job
            $job = Start-ThreadJob -ScriptBlock {
                param($filePath, $token, $errors, $cancellationSource)

                if ($token.IsCancellationRequested) { return }

                & ${{ env.SIGNER_PATH }} -ts -fu '${{ steps.set-secrets.outputs.username }}' -fp '${{ steps.set-secrets.outputs.password }}' -pm '${{ inputs.sign-description }}' --program-url '${{ inputs.sign-url }}' -in $filePath > ~/.Acsi/log/$(Split-Path -Leaf $filePath).log 2>&1
                $exitCode = $LASTEXITCODE;
                if ($exitCode -ne 0 && !$token.IsCancellationRequested) {
                    $errors.Add("Signing $filePath failed. Exit code: $exitCode.")
                    $cancellationSource.Cancel()  # Trigger cancellation for other jobs
                }
            } -ArgumentList $file.FullName, $token, $errors, $cancellationSource

            $jobs.Add($job)
        }

        # Wait for remaining jobs
        $jobs | Wait-Job | Out-Null

        # Final result
        if ($errors.Count -gt 0) {
            Write-Host "`n❌ Error occurred:"
            $errors | Select-Object -First 1 | Write-Host
            exit 1
        }
        else {
            Write-Host "`n✅ All files signed successfully."
        }
      env:
        SIGNER_PATH: ${{ github.workspace }}/actalis-signer/ActalisCodeSigner.exe
      shell: pwsh
    - name: Upload log on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: signing-log-${{ runner.arch }}
        path: |
          ~/.Acsi/log/*.log
