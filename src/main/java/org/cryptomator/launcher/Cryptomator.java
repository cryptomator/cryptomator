/*******************************************************************************
 * Copyright (c) 2017 Skymatic UG (haftungsbeschr√§nkt).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the accompanying LICENSE file.
 *******************************************************************************/
package org.cryptomator.launcher;

import com.google.common.util.concurrent.ThreadFactoryBuilder;
import dagger.Lazy;
import org.apache.commons.lang3.SystemUtils;
import org.cryptomator.common.Environment;
import org.cryptomator.common.ShutdownHook;
import org.cryptomator.ipc.IpcCommunicator;
import org.cryptomator.logging.DebugMode;
import org.cryptomator.logging.LoggerConfiguration;
import org.cryptomator.ui.launcher.UiLauncher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;

@Singleton
public class Cryptomator {

	// DaggerCryptomatorComponent gets generated by Dagger.
	// Run Maven and include target/generated-sources/annotations in your IDE.
	private static final CryptomatorComponent CRYPTOMATOR_COMPONENT = DaggerCryptomatorComponent.create();
	private static final Logger LOG = LoggerFactory.getLogger(Cryptomator.class);

	private final LoggerConfiguration logConfig;
	private final DebugMode debugMode;
	private final Environment env;
	private final Lazy<IpcMessageHandler> ipcMessageHandler;
	private final CountDownLatch shutdownLatch;
	private final ShutdownHook shutdownHook;
	private final Lazy<UiLauncher> uiLauncher;

	@Inject
	Cryptomator(LoggerConfiguration logConfig, DebugMode debugMode, Environment env, Lazy<IpcMessageHandler> ipcMessageHandler, @Named("shutdownLatch") CountDownLatch shutdownLatch, ShutdownHook shutdownHook, Lazy<UiLauncher> uiLauncher) {
		this.logConfig = logConfig;
		this.debugMode = debugMode;
		this.env = env;
		this.ipcMessageHandler = ipcMessageHandler;
		this.shutdownLatch = shutdownLatch;
		this.shutdownHook = shutdownHook;
		this.uiLauncher = uiLauncher;
	}

	public static void main(String[] args) {
		int exitCode = CRYPTOMATOR_COMPONENT.application().run(args);
		LOG.info("Exit {}", exitCode);
		System.exit(exitCode); // end remaining non-daemon threads.
	}

	/**
	 * Main entry point of the application launcher.
	 *
	 * @param args The arguments passed to this program via {@link #main(String[])}.
	 * @return Nonzero exit code in case of an error.
	 */
	private int run(String[] args) {
		logConfig.init();
		LOG.info("Starting Cryptomator {} on {} {} ({})", env.getAppVersion().orElse("SNAPSHOT"), SystemUtils.OS_NAME, SystemUtils.OS_VERSION, SystemUtils.OS_ARCH);
		debugMode.initialize();

		/*
		 * Attempts to create an IPC connection to a running Cryptomator instance and sends it the given args.
		 * If no external process could be reached, the args will be handled by the loopback IPC endpoint.
		 */
		try (var communicator = IpcCommunicator.create(env.ipcSocketPath().toList())) {
			if (communicator.isClient()) {
				communicator.sendHandleLaunchargs(List.of(args));
				communicator.sendRevealRunningApp();
				LOG.info("Found running application instance. Shutting down...");
				return 0;
			} else {
				shutdownHook.runOnShutdown(communicator::closeUnchecked);
				var executor = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("IPC-%d").build());
				var msgHandler = ipcMessageHandler.get();
				msgHandler.handleLaunchArgs(List.of(args));
				communicator.listen(msgHandler, executor);
				LOG.debug("Did not find running application instance. Launching GUI...");
				return runGuiApplication();
			}
		} catch (Throwable e) {
			LOG.error("Running application failed", e);
			return 1;
		}
	}

	/**
	 * Launches the JavaFX application and waits until shutdown is requested.
	 *
	 * @return Nonzero exit code in case of an error.
	 * @implNote This method blocks until {@link #shutdownLatch} reached zero.
	 */
	private int runGuiApplication() {
		try {
			uiLauncher.get().launch();
			shutdownLatch.await();
			LOG.info("UI shut down");
			return 0;
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			return 1;
		}
	}

}
